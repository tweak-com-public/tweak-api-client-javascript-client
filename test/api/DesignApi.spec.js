/**
 * tweak-api
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.tweakApi);
  }
}(this, function(expect, tweakApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new tweakApi.DesignApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DesignApi', function() {
    describe('designCount', function() {
      it('should call designCount successfully', function(done) {
        //uncomment below and update the code to test designCount
        //instance.designCount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designCreate', function() {
      it('should call designCreate successfully', function(done) {
        //uncomment below and update the code to test designCreate
        //instance.designCreate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designCreateChangeStreamGetDesignsChangeStream', function() {
      it('should call designCreateChangeStreamGetDesignsChangeStream successfully', function(done) {
        //uncomment below and update the code to test designCreateChangeStreamGetDesignsChangeStream
        //instance.designCreateChangeStreamGetDesignsChangeStream(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designCreateChangeStreamPostDesignsChangeStream', function() {
      it('should call designCreateChangeStreamPostDesignsChangeStream successfully', function(done) {
        //uncomment below and update the code to test designCreateChangeStreamPostDesignsChangeStream
        //instance.designCreateChangeStreamPostDesignsChangeStream(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDeleteById', function() {
      it('should call designDeleteById successfully', function(done) {
        //uncomment below and update the code to test designDeleteById
        //instance.designDeleteById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designExistsGetDesignsidExists', function() {
      it('should call designExistsGetDesignsidExists successfully', function(done) {
        //uncomment below and update the code to test designExistsGetDesignsidExists
        //instance.designExistsGetDesignsidExists(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designExistsHeadDesignsid', function() {
      it('should call designExistsHeadDesignsid successfully', function(done) {
        //uncomment below and update the code to test designExistsHeadDesignsid
        //instance.designExistsHeadDesignsid(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designFind', function() {
      it('should call designFind successfully', function(done) {
        //uncomment below and update the code to test designFind
        //instance.designFind(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designFindById', function() {
      it('should call designFindById successfully', function(done) {
        //uncomment below and update the code to test designFindById
        //instance.designFindById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designFindOne', function() {
      it('should call designFindOne successfully', function(done) {
        //uncomment below and update the code to test designFindOne
        //instance.designFindOne(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeCountCategories', function() {
      it('should call designPrototypeCountCategories successfully', function(done) {
        //uncomment below and update the code to test designPrototypeCountCategories
        //instance.designPrototypeCountCategories(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeCountTags', function() {
      it('should call designPrototypeCountTags successfully', function(done) {
        //uncomment below and update the code to test designPrototypeCountTags
        //instance.designPrototypeCountTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeCreateCategories', function() {
      it('should call designPrototypeCreateCategories successfully', function(done) {
        //uncomment below and update the code to test designPrototypeCreateCategories
        //instance.designPrototypeCreateCategories(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeCreateTags', function() {
      it('should call designPrototypeCreateTags successfully', function(done) {
        //uncomment below and update the code to test designPrototypeCreateTags
        //instance.designPrototypeCreateTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeDeleteCategories', function() {
      it('should call designPrototypeDeleteCategories successfully', function(done) {
        //uncomment below and update the code to test designPrototypeDeleteCategories
        //instance.designPrototypeDeleteCategories(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeDeleteTags', function() {
      it('should call designPrototypeDeleteTags successfully', function(done) {
        //uncomment below and update the code to test designPrototypeDeleteTags
        //instance.designPrototypeDeleteTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeDestroyByIdCategories', function() {
      it('should call designPrototypeDestroyByIdCategories successfully', function(done) {
        //uncomment below and update the code to test designPrototypeDestroyByIdCategories
        //instance.designPrototypeDestroyByIdCategories(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeDestroyByIdTags', function() {
      it('should call designPrototypeDestroyByIdTags successfully', function(done) {
        //uncomment below and update the code to test designPrototypeDestroyByIdTags
        //instance.designPrototypeDestroyByIdTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeFindByIdCategories', function() {
      it('should call designPrototypeFindByIdCategories successfully', function(done) {
        //uncomment below and update the code to test designPrototypeFindByIdCategories
        //instance.designPrototypeFindByIdCategories(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeFindByIdTags', function() {
      it('should call designPrototypeFindByIdTags successfully', function(done) {
        //uncomment below and update the code to test designPrototypeFindByIdTags
        //instance.designPrototypeFindByIdTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeGetCategories', function() {
      it('should call designPrototypeGetCategories successfully', function(done) {
        //uncomment below and update the code to test designPrototypeGetCategories
        //instance.designPrototypeGetCategories(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeGetCustomer', function() {
      it('should call designPrototypeGetCustomer successfully', function(done) {
        //uncomment below and update the code to test designPrototypeGetCustomer
        //instance.designPrototypeGetCustomer(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeGetTags', function() {
      it('should call designPrototypeGetTags successfully', function(done) {
        //uncomment below and update the code to test designPrototypeGetTags
        //instance.designPrototypeGetTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeUpdateAttributesPatchDesignsid', function() {
      it('should call designPrototypeUpdateAttributesPatchDesignsid successfully', function(done) {
        //uncomment below and update the code to test designPrototypeUpdateAttributesPatchDesignsid
        //instance.designPrototypeUpdateAttributesPatchDesignsid(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeUpdateAttributesPutDesignsid', function() {
      it('should call designPrototypeUpdateAttributesPutDesignsid successfully', function(done) {
        //uncomment below and update the code to test designPrototypeUpdateAttributesPutDesignsid
        //instance.designPrototypeUpdateAttributesPutDesignsid(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeUpdateByIdCategories', function() {
      it('should call designPrototypeUpdateByIdCategories successfully', function(done) {
        //uncomment below and update the code to test designPrototypeUpdateByIdCategories
        //instance.designPrototypeUpdateByIdCategories(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPrototypeUpdateByIdTags', function() {
      it('should call designPrototypeUpdateByIdTags successfully', function(done) {
        //uncomment below and update the code to test designPrototypeUpdateByIdTags
        //instance.designPrototypeUpdateByIdTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designReplaceById', function() {
      it('should call designReplaceById successfully', function(done) {
        //uncomment below and update the code to test designReplaceById
        //instance.designReplaceById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designReplaceOrCreate', function() {
      it('should call designReplaceOrCreate successfully', function(done) {
        //uncomment below and update the code to test designReplaceOrCreate
        //instance.designReplaceOrCreate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designUpdateAll', function() {
      it('should call designUpdateAll successfully', function(done) {
        //uncomment below and update the code to test designUpdateAll
        //instance.designUpdateAll(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designUpsertPatchDesigns', function() {
      it('should call designUpsertPatchDesigns successfully', function(done) {
        //uncomment below and update the code to test designUpsertPatchDesigns
        //instance.designUpsertPatchDesigns(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designUpsertPutDesigns', function() {
      it('should call designUpsertPutDesigns successfully', function(done) {
        //uncomment below and update the code to test designUpsertPutDesigns
        //instance.designUpsertPutDesigns(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designUpsertWithWhere', function() {
      it('should call designUpsertWithWhere successfully', function(done) {
        //uncomment below and update the code to test designUpsertWithWhere
        //instance.designUpsertWithWhere(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
