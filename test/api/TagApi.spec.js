/**
 * tweak-api
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.tweakApi);
  }
}(this, function(expect, tweakApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new tweakApi.TagApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TagApi', function() {
    describe('tagCount', function() {
      it('should call tagCount successfully', function(done) {
        //uncomment below and update the code to test tagCount
        //instance.tagCount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagCreate', function() {
      it('should call tagCreate successfully', function(done) {
        //uncomment below and update the code to test tagCreate
        //instance.tagCreate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagCreateChangeStreamGetTagsChangeStream', function() {
      it('should call tagCreateChangeStreamGetTagsChangeStream successfully', function(done) {
        //uncomment below and update the code to test tagCreateChangeStreamGetTagsChangeStream
        //instance.tagCreateChangeStreamGetTagsChangeStream(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagCreateChangeStreamPostTagsChangeStream', function() {
      it('should call tagCreateChangeStreamPostTagsChangeStream successfully', function(done) {
        //uncomment below and update the code to test tagCreateChangeStreamPostTagsChangeStream
        //instance.tagCreateChangeStreamPostTagsChangeStream(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagDeleteById', function() {
      it('should call tagDeleteById successfully', function(done) {
        //uncomment below and update the code to test tagDeleteById
        //instance.tagDeleteById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagExistsGetTagsidExists', function() {
      it('should call tagExistsGetTagsidExists successfully', function(done) {
        //uncomment below and update the code to test tagExistsGetTagsidExists
        //instance.tagExistsGetTagsidExists(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagExistsHeadTagsid', function() {
      it('should call tagExistsHeadTagsid successfully', function(done) {
        //uncomment below and update the code to test tagExistsHeadTagsid
        //instance.tagExistsHeadTagsid(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagFind', function() {
      it('should call tagFind successfully', function(done) {
        //uncomment below and update the code to test tagFind
        //instance.tagFind(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagFindById', function() {
      it('should call tagFindById successfully', function(done) {
        //uncomment below and update the code to test tagFindById
        //instance.tagFindById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagFindOne', function() {
      it('should call tagFindOne successfully', function(done) {
        //uncomment below and update the code to test tagFindOne
        //instance.tagFindOne(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagPrototypeUpdateAttributesPatchTagsid', function() {
      it('should call tagPrototypeUpdateAttributesPatchTagsid successfully', function(done) {
        //uncomment below and update the code to test tagPrototypeUpdateAttributesPatchTagsid
        //instance.tagPrototypeUpdateAttributesPatchTagsid(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagPrototypeUpdateAttributesPutTagsid', function() {
      it('should call tagPrototypeUpdateAttributesPutTagsid successfully', function(done) {
        //uncomment below and update the code to test tagPrototypeUpdateAttributesPutTagsid
        //instance.tagPrototypeUpdateAttributesPutTagsid(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagReplaceById', function() {
      it('should call tagReplaceById successfully', function(done) {
        //uncomment below and update the code to test tagReplaceById
        //instance.tagReplaceById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagReplaceOrCreate', function() {
      it('should call tagReplaceOrCreate successfully', function(done) {
        //uncomment below and update the code to test tagReplaceOrCreate
        //instance.tagReplaceOrCreate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagUpdateAll', function() {
      it('should call tagUpdateAll successfully', function(done) {
        //uncomment below and update the code to test tagUpdateAll
        //instance.tagUpdateAll(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagUpsertPatchTags', function() {
      it('should call tagUpsertPatchTags successfully', function(done) {
        //uncomment below and update the code to test tagUpsertPatchTags
        //instance.tagUpsertPatchTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagUpsertPutTags', function() {
      it('should call tagUpsertPutTags successfully', function(done) {
        //uncomment below and update the code to test tagUpsertPutTags
        //instance.tagUpsertPutTags(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagUpsertWithWhere', function() {
      it('should call tagUpsertWithWhere successfully', function(done) {
        //uncomment below and update the code to test tagUpsertWithWhere
        //instance.tagUpsertWithWhere(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
